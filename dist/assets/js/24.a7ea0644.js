(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{406:function(_,v,i){_.exports=i.p+"assets/img/image-20240201142520401.8b92dbe8.png"},407:function(_,v,i){_.exports=i.p+"assets/img/image-20240201142547747.5fb7fda6.png"},408:function(_,v,i){_.exports=i.p+"assets/img/image-20240201142635050.166a3b3b.png"},409:function(_,v,i){_.exports=i.p+"assets/img/image-20240201142652637.a761fa6c.png"},410:function(_,v,i){_.exports=i.p+"assets/img/image-20240201142720858.7c615b82.png"},411:function(_,v,i){_.exports=i.p+"assets/img/image-20240201142735695.3887d439.png"},412:function(_,v,i){_.exports=i.p+"assets/img/image-20240201142755251.15546d4d.png"},438:function(_,v,i){"use strict";i.r(v);var l=i(14),p=Object(l.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"单选"}},[_._v("单选")]),_._v(" "),v("p",[_._v("1.计算机算法指的是")]),_._v(" "),v("ul",[v("li",[_._v("A. 计算方法")]),_._v(" "),v("li",[_._v("B. 解决问题的步骤序列")]),_._v(" "),v("li",[_._v("C. 排序方法")]),_._v(" "),v("li",[_._v("D. 调度方法")])]),_._v(" "),v("p",[_._v("2.顺序表比链表")]),_._v(" "),v("ul",[v("li",[_._v("A. 更便于随机读取")]),_._v(" "),v("li",[_._v("C. 插入和删除更简便")]),_._v(" "),v("li",[_._v("B. 数据元素的物理存储范围更分散")]),_._v(" "),v("li",[_._v("D. 更适合线性逻辑结构")])]),_._v(" "),v("p",[_._v("3.在一个长度为n的顺序表的第i(lSiSn+1)个位置上插入一个元素，需要后移()\n个元素。")]),_._v(" "),v("ul",[v("li",[_._v("A. n-i")]),_._v(" "),v("li",[_._v("B. n-i-l")]),_._v(" "),v("li",[_._v("C. n-i+1")]),_._v(" "),v("li",[_._v("D. n+i")])]),_._v(" "),v("p",[_._v("4.要从一个顺序表删除一个元素时，被删除元素之后的所有元素均需()一个位置\n移动过程是从()向()依次移动一个元素。")]),_._v(" "),v("ul",[v("li",[_._v("A. 前移，后，前")]),_._v(" "),v("li",[_._v("B. 前移，前，后")]),_._v(" "),v("li",[_._v("C. 后移，后，前")]),_._v(" "),v("li",[_._v("D. 后移，前，后")])]),_._v(" "),v("p",[_._v("5.向一个栈顶指针为 top 的链栈中插入一个s 结点，应执行()")]),_._v(" "),v("ul",[v("li",[_._v("A. top->next=s;")]),_._v(" "),v("li",[_._v("B. s->next-top;top=s;")]),_._v(" "),v("li",[_._v("C. s->next-top->next; top->next=s;")]),_._v(" "),v("li",[_._v("D. s->next-top;top = top->next;")])]),_._v(" "),v("p",[_._v("6.设某二叉树中度数为 0 的结点数为 N0，度数为 1 的结点数为 N1，度数为 2 的结点数为 N2，则下列等式成立的是()")]),_._v(" "),v("ul",[v("li",[_._v("A. N0 = N1+1")]),_._v(" "),v("li",[_._v("B. N0 = N1+ N2")]),_._v(" "),v("li",[_._v("C. N0 = N2+1")]),_._v(" "),v("li",[_._v("D. N0 = 2N1+1")])]),_._v(" "),v("p",[_._v("7.一棵二叉树的后序遍历序列为 C、A、E、B、D，中序遍历序列为D、A、C、B、E,\n则先序遍历序列为()")]),_._v(" "),v("ul",[v("li",[_._v("A. D、B、A、C、E")]),_._v(" "),v("li",[_._v("C. C、E、D、B、A")]),_._v(" "),v("li",[_._v("B. D、A、B、E、C")]),_._v(" "),v("li",[_._v("D. C、B、D、A、E")])]),_._v(" "),v("p",[_._v("8.Huftman 树的带权路径长度等于()")]),_._v(" "),v("ul",[v("li",[_._v("A. 除根结点之外的所有结点权值之和")]),_._v(" "),v("li",[_._v("C. 各叶子结点的带权路径长度之和")]),_._v(" "),v("li",[_._v("B. 所有结点权值之和")]),_._v(" "),v("li",[_._v("D. 根结点的值")])]),_._v(" "),v("p",[_._v("9.设有6个顶点的无向图，该图至少有()条边，才能确保是一个连通图")]),_._v(" "),v("ul",[v("li",[_._v("A. 5")]),_._v(" "),v("li",[_._v("B. 6")]),_._v(" "),v("li",[_._v("C. 7")]),_._v(" "),v("li",[_._v("D. 8")])]),_._v(" "),v("p",[_._v("10.设某无向图中有 n 个顶点e 条边，则建立该图邻接表的时间复杂度为()")]),_._v(" "),v("ul",[v("li",[_._v("A. O(n+e)")]),_._v(" "),v("li",[_._v("B. O(n2)")]),_._v(" "),v("li",[_._v("C. O(ne)")]),_._v(" "),v("li",[_._v("D. O(n3)")])]),_._v(" "),v("p",[_._v("11.若图的邻接矩阵中主对角线上的元素全是 0，其余元素全是 1，则可以断定该图一定是()")]),_._v(" "),v("ul",[v("li",[_._v("A. 无向图")]),_._v(" "),v("li",[_._v("B. 不是带权图")]),_._v(" "),v("li",[_._v("C. 有向图")]),_._v(" "),v("li",[_._v("D. 完全图")])]),_._v(" "),v("p",[_._v("12.已知采用开放地址法解决散列表冲突，要从此散列表中删除一个记录，正确的做法是")]),_._v(" "),v("ul",[v("li",[_._v("A. 将该元素所在的存储单元清空")]),_._v(" "),v("li",[_._v("B. 在该元素上做删除标记。")]),_._v(" "),v("li",[_._v("C. 将与该元素有相同 Hash 地址的后继元素顺次前移一个位置。")]),_._v(" "),v("li",[_._v("D. 用与该元素有相同Hash 地址的最后插入表中的元素替代。")])]),_._v(" "),v("p",[_._v("13.散列函数有一个共同性质，即函数值应当以()取其值域的每个值")]),_._v(" "),v("ul",[v("li",[_._v("A. 最大概率")]),_._v(" "),v("li",[_._v("B. 最小概率")]),_._v(" "),v("li",[_._v("C. 平均概率")]),_._v(" "),v("li",[_._v("D. 等概率")])]),_._v(" "),v("p",[_._v("14.快速排序方法在()情况下最不利于发挥其长处")]),_._v(" "),v("ul",[v("li",[_._v("A. 要排序的数据量太大")]),_._v(" "),v("li",[_._v("B. 要排序的数据中含有多个相同值")]),_._v(" "),v("li",[_._v("C. 要排序的数据已基本有序")]),_._v(" "),v("li",[_._v("D. 要排序的数据个数为奇数")])]),_._v(" "),v("p",[_._v("15.在归并排序过程中，需归并的趟数为()")]),_._v(" "),v("ul",[v("li",[_._v("A. √n")]),_._v(" "),v("li",[_._v("B. ⌈lbn⌉")]),_._v(" "),v("li",[_._v("C. n")]),_._v(" "),v("li",[_._v("D. ⌊lbn⌋")])]),_._v(" "),v("h2",{attrs:{id:"判断"}},[_._v("判断")]),_._v(" "),v("p",[_._v("1.线性表中的所有元素都有一个前驱元素和后继元素（）")]),_._v(" "),v("p",[_._v("2.栈和队列的存储方式只能是链接方式（）")]),_._v(" "),v("p",[_._v("3.查找和修改是对数组的基本操作（）")]),_._v(" "),v("p",[_._v("4.二叉树的后序遍历序列中，任意一个结点均处在其孩子结点的后面（）")]),_._v(" "),v("p",[_._v("5.一个含有 n 个结点的完全二叉树，它的高度是 ⌊ logn ⌋+1（）")]),_._v(" "),v("p",[_._v("6.当向二叉排序树中插入一个结点，则该结点一定成为叶子结点（）")]),_._v(" "),v("p",[_._v("7.调用一次深度优先遍历可以访问到图中的所有顶点（）")]),_._v(" "),v("p",[_._v("8.带权无向图的最小生成树是唯一的（）")]),_._v(" "),v("p",[_._v("9.如果表示某个图的邻接矩阵是不对称矩阵，则该图一定是有向图（）")]),_._v(" "),v("p",[_._v("10.在一个有向图的拓扑序列中,若顶点a在顶点b之前,则图中必有一条弧<a, b>（）")]),_._v(" "),v("p",[_._v("11.在散列法中，散列函数必须是一个一对一的函数（）")]),_._v(" "),v("p",[_._v("12.散列表发生冲突的可能性与装填因子无关（）")]),_._v(" "),v("p",[_._v("13.索引顺序结构和索引非顺序结构的索引表中索引项都是按照关键字顺序排列的（）")]),_._v(" "),v("p",[_._v("14.对 个元素执行快速排序，在进行第一次划分时，关键字的比较次数总是 n-1 次（）")]),_._v(" "),v("p",[_._v("15.归并排序算法中辅助组所需的空间复杂度为 O(n)（）")]),_._v(" "),v("h2",{attrs:{id:"填空"}},[_._v("填空")]),_._v(" "),v("p",[_._v("1.数据的物理结构主要包括 ____ 和 ____ 两种情况")]),_._v(" "),v("p",[_._v("2.顺序表中逻辑上 ____ 的元素的物理位置相邻")]),_._v(" "),v("p",[_._v("3.在双向循环链表中，在m 所指的结点之后插入 n 指针所指的结点，其操作是 ____; n->next = m->next; m->next->prior = n; m->next=n;")]),_._v(" "),v("p",[_._v("4.设有一个空栈，现有输入序列 (a,b,c,d,e)，经过 push，push，pop，push，pop，push，push 的操作，输出序列是 ____")]),_._v(" "),v("p",[_._v("5.两个字符串相等的充要条件是两个串的 ____ 相等和对应位置的字符相等")]),_._v(" "),v("p",[_._v("6.装有n个叶子的哈夫曼树的结点总数为 ____")]),_._v(" "),v("p",[_._v("7.设二叉树中结点的两个指针域分别为 lchild 和 rchild，则判断指针变量 p 所指向的结点为叶子结点的条件是 ____")]),_._v(" "),v("p",[_._v("8.根据初始关键字序列(19、22、01、38、10)建立的二叉排序树的高度为 ____")]),_._v(" "),v("p",[_._v("9.设一棵二叉树的前序序列为 ABC， 则有 ____ 种不同的二叉树可以得到这种序列")]),_._v(" "),v("p",[_._v("10.解决散列表冲突的两种方法是 ____ 和 ____")]),_._v(" "),v("p",[_._v("11.对于一个具有 n 个顶点和 e 条边的无向图，如果采用邻接表存储方法存储该无向图边表中所含结点有 ____")]),_._v(" "),v("p",[_._v("12.在一个具有 n 个顶点的完全有向图中，包含有 ____ 条边")]),_._v(" "),v("p",[_._v("13.设某无向图中顶点数和边数分别为 n 和 e，所有顶点的度数之和为 d，则 e = ____")]),_._v(" "),v("p",[_._v("14.对一个长度为 n 的任意文件进行排序，至少需要 ____ 次比较")]),_._v(" "),v("p",[_._v("15.对n个元素进行冒泡排序时，最少的比较次数是 ____")]),_._v(" "),v("h2",{attrs:{id:"问题求解"}},[_._v("问题求解")]),_._v(" "),v("img",{attrs:{src:i(406)}}),_._v(" "),v("img",{attrs:{src:i(407)}}),_._v(" "),v("img",{attrs:{src:i(408)}}),_._v(" "),v("h2",{attrs:{id:"算法"}},[_._v("算法")]),_._v(" "),v("img",{attrs:{src:i(409)}}),_._v(" "),v("img",{attrs:{src:i(410)}}),_._v(" "),v("img",{attrs:{src:i(411)}}),_._v(" "),v("img",{attrs:{src:i(412)}}),_._v(" "),v("img",{attrs:{src:"/assets/image-20240201142813583.png"}})])}),[],!1,null,null,null);v.default=p.exports}}]);