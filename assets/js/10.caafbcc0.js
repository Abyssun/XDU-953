(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{378:function(t,s,a){t.exports=a.p+"assets/img/image-20230801142521844.e4a210df.png"},379:function(t,s,a){t.exports=a.p+"assets/img/image-20230801142645867.f3766585.png"},380:function(t,s,a){t.exports=a.p+"assets/img/image-20230801153928025.449ff3cc.png"},381:function(t,s,a){t.exports=a.p+"assets/img/image-20230801143413468.c1d87de9.png"},382:function(t,s,a){t.exports=a.p+"assets/img/image-20230801143949139.7929dc54.png"},383:function(t,s,a){t.exports=a.p+"assets/img/aHR0cH2.0bb4897c.png"},384:function(t,s,a){t.exports=a.p+"assets/img/aHR0cH1.e1b6a354.png"},385:function(t,s,a){t.exports=a.p+"assets/img/image-20230801150849290.e49e42f9.png"},386:function(t,s,a){t.exports=a.p+"assets/img/image-20230801144841573.5886c173.png"},387:function(t,s,a){t.exports=a.p+"assets/img/image-20230801150545411.c8960358.png"},388:function(t,s,a){t.exports=a.p+"assets/img/image-20230801145205487.62b8be21.png"},389:function(t,s,a){t.exports=a.p+"assets/img/image-20230801150642656.e79ac312.png"},390:function(t,s,a){t.exports=a.p+"assets/img/image-20230801151057533.5b4fd387.png"},391:function(t,s,a){t.exports=a.p+"assets/img/image-20230801151034045.d259d59c.png"},392:function(t,s,a){t.exports=a.p+"assets/img/image-20230801153730396.95b877ec.png"},393:function(t,s,a){t.exports=a.p+"assets/img/image-20230801153705075.6bdea910.png"},394:function(t,s,a){t.exports=a.p+"assets/img/image-20230801154636141.4e65d123.png"},395:function(t,s,a){t.exports=a.p+"assets/img/image-20230801154845948.1ad1fe80.png"},396:function(t,s,a){t.exports=a.p+"assets/img/image-20230801153853817.0ddfa81c.png"},397:function(t,s,a){t.exports=a.p+"assets/img/image-20230731221514058.59f78a37.png"},398:function(t,s,a){t.exports=a.p+"assets/img/image-20230801141758944.a206d9f8.png"},399:function(t,s,a){t.exports=a.p+"assets/img/image-20230801141822203.4193387d.png"},400:function(t,s,a){t.exports=a.p+"assets/img/image-20230801141335113.f1faac96.png"},401:function(t,s,a){t.exports=a.p+"assets/img/image-20230801140656269.994e5aa6.png"},402:function(t,s,a){t.exports=a.p+"assets/img/image-20230731221450959.3f3d554b.png"},403:function(t,s,a){t.exports=a.p+"assets/img/image-20230731221622678.6c96cf6e.png"},404:function(t,s,a){t.exports=a.p+"assets/img/image-20230731221424328.01bd4c1c.png"},405:function(t,s,a){t.exports=a.p+"assets/img/image-20230801140520515.c14b8f08.png"},406:function(t,s,a){t.exports=a.p+"assets/img/image-20230731221358560.49bb0802.png"},407:function(t,s,a){t.exports=a.p+"assets/img/image-20230731221246354.a665586b.png"},408:function(t,s,a){t.exports=a.p+"assets/img/image-20230801135551296.09017880.png"},409:function(t,s,a){t.exports=a.p+"assets/img/image-20230801135835120.62f4e72a.png"},410:function(t,s,a){t.exports=a.p+"assets/img/image-20230801140353563.7eca8779.png"},411:function(t,s,a){t.exports=a.p+"assets/img/image-20230731221205769.6a8a799f.png"},412:function(t,s,a){t.exports=a.p+"assets/img/image-20230731222400768.2b3bd44a.png"},413:function(t,s,a){t.exports=a.p+"assets/img/image-20230801142021703.0f4dfdbe.png"},502:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_2020"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2020"}},[t._v("#")]),t._v(" 2020")]),t._v(" "),s("h3",{attrs:{id:"顺序表和链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#顺序表和链表"}},[t._v("#")]),t._v(" 顺序表和链表")]),t._v(" "),s("p",[t._v("可以画图考虑，也可以考虑特殊情况")]),t._v(" "),s("img",{attrs:{src:a(378)}}),t._v(" "),s("p",[t._v("注意插入位置 i 的取值区间"),s("code",[t._v("[1, n+1]")]),t._v("，现在长度为 n，在 n+1 位置插入即为尾插，"),s("strong",[t._v("不妨只需要考虑一个特殊情况，比如尾插")]),t._v("，此时"),s("code",[t._v("i = n+1")]),t._v("，移动次数为 0，设用于偏移的未知数为 x，则有\n$$\nn+x-i=0\\Rightarrow n+x-(n+1)=0\\Rightarrow x=1\n$$\n故后移元素个数满足，选 C\n$$\nn+1-i\n$$\n"),s("img",{attrs:{src:a(379)}})]),t._v(" "),s("p",[t._v("链栈默认无头结点（但链表默认有头结点），这里只能选 B，无论是否有头结点，A、C、D 肯定是不行")]),t._v(" "),s("p",[t._v("链表结点的删除")]),t._v(" "),s("img",{attrs:{src:a(380)}}),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LinkList"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" L"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" min"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    LinkList "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" L"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    q "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" L"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" min "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" max"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p 是 q 的前驱，此时要删除 q")]),t._v("\n            p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删去边")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删去结点")]),t._v("\n            q "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重新将 q 指向 p 的后继结点，下一轮判定")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当不符合时，p，q 向后移动遍历")]),t._v("\n         \tp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            q "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"连通图和完全图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连通图和完全图"}},[t._v("#")]),t._v(" 连通图和完全图")]),t._v(" "),s("img",{attrs:{src:a(381)}}),t._v(" "),s("p",[t._v("注意措辞“确保是一个连通图”，当边个数大于顶点为 5 的完全连通图，这个顶点为 6 的无向图一定连通，但是这样边数至少为"),s("code",[t._v("(1+2+3+4)+1 = 11")]),t._v("，显然不符题意，所以题目说的是最少几条边能满足连通，故为"),s("code",[t._v("6-1 = 5")]),t._v("（感觉这吊题语文有问题）")]),t._v(" "),s("p",[t._v("对于有向图，连通的概念是“通过任一结点，都可以到达当前结点”")]),t._v(" "),s("img",{attrs:{src:a(382)}}),t._v(" "),s("p",[t._v("和完全图做一个区分")]),t._v(" "),s("ul",[s("li",[t._v("无向完全图：每个顶点之间均相连")]),t._v(" "),s("li",[t._v("有向完全图：每个顶点之间都存在方向相反的两条弧")])]),t._v(" "),s("p",[t._v("如下")]),t._v(" "),s("img",{attrs:{src:a(383)}}),t._v(" "),s("img",{attrs:{src:a(384)}}),t._v(" "),s("p",[t._v("连通图只保证能从另一结点到达当前结点，完全图一定是连通图，反之不成立")]),t._v(" "),s("img",{attrs:{src:a(385)}}),t._v(" "),s("p",[t._v("乘 2 是因为双向边，其他就是一个 n 结点连接求和\n$$\n2\\times[1+2+...+(n-1)]=2\\times\\frac{n(n-1)}{2} = n(n-1)\n$$")]),t._v(" "),s("h3",{attrs:{id:"归并排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#归并排序"}},[t._v("#")]),t._v(" 归并排序")]),t._v(" "),s("img",{attrs:{src:a(386)}}),t._v(" "),s("p",[t._v("首先明确这个 lb 符号，就是以 2 为底的对数的意思，归并排序每次将前后顺序相邻的元素平均分组，再两两合并，对于最后多出来的一组单独处理（最后合并），有点像分段存储的最后一段，所以归并次数向上取整\n$$\n\\lceil lbn\\rceil = \\lceil log_2n\\rceil\n$$")]),t._v(" "),s("p",[t._v("但比较次数不同")]),t._v(" "),s("img",{attrs:{src:a(387)}}),t._v(" "),s("p",[t._v("为\n$$\nO(nlog_2n)\n$$\n注意区分归并次数和比较次数")]),t._v(" "),s("h3",{attrs:{id:"判断和填空题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断和填空题"}},[t._v("#")]),t._v(" 判断和填空题")]),t._v(" "),s("p",[s("code",[t._v("√、√")])]),t._v(" "),s("img",{attrs:{src:a(388)}}),t._v(" "),s("p",[t._v("对第四题不考虑结点无孩子的情况，笼统上说，后序遍历特性确实如此；第五题举例吧，应该是对的")]),t._v(" "),s("img",{attrs:{src:a(389)}}),t._v(" "),s("p",[t._v("第四题明明只有两个 pop，所以我只写了 bc，但由于 5 次 push，顺序已经确定，所以要填上完整的序列 bceda")]),t._v(" "),s("p",[t._v("第五题，字符串相等的充要条件：长度相等且对应位置字符相等")]),t._v(" "),s("h3",{attrs:{id:"散列表平均查找长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#散列表平均查找长度"}},[t._v("#")]),t._v(" 散列表平均查找长度")]),t._v(" "),s("img",{attrs:{src:a(390)}}),t._v(" "),s("p",[s("strong",[t._v("等概率取值")]),t._v("是散列函数的性质")]),t._v(" "),s("img",{attrs:{src:a(391)}}),t._v(" "),s("p",[t._v("画出散列表后对每个元素的查找成功的比较次数求和，共十个元素，所以成功的平均查找长度要除以 10，得平均查找长度")]),t._v(" "),s("h3",{attrs:{id:"邻接矩阵和邻接表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#邻接矩阵和邻接表"}},[t._v("#")]),t._v(" 邻接矩阵和邻接表")]),t._v(" "),s("img",{attrs:{src:a(392)}}),t._v(" "),s("img",{attrs:{src:a(393)}}),t._v(" "),s("p",[t._v("邻接表用一个一分为二的长方形来表示，前半部表示顶点，后半部表示指针")]),t._v(" "),s("p",[t._v("通过深度优先搜索邻接表判定图中路径的存在性")]),t._v(" "),s("img",{attrs:{src:a(394)}}),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("N")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("node")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" adjvex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("node")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("edgenode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    chat vertex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    edgenode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("link"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("vexnode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" visited"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exist_path_DFS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vexnode ga"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以邻接表为存储结构，判断 vi 和 vj 之间是否存在路径，有返回1，否则返回0")]),t._v("\n    edgenode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("________"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        visited"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标记 vi 已被访问")]),t._v("\n        ________"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 访问 vi 的第一个邻接点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("________"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 依次访问 vi 的邻接点")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("________"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("________"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vi的邻接点若未被访问且该邻接点到vj存在路径")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("img",{attrs:{src:a(395)}}),t._v(" "),s("h3",{attrs:{id:"背包问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背包问题"}},[t._v("#")]),t._v(" 背包问题")]),t._v(" "),s("p",[t._v("就是一个贪婪算法：始终先装满"),s("strong",[t._v("性价比高")]),t._v("的物品")]),t._v(" "),s("img",{attrs:{src:a(396)}}),t._v(" "),s("h2",{attrs:{id:"_2021"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2021"}},[t._v("#")]),t._v(" 2021")]),t._v(" "),s("h3",{attrs:{id:"概念和判断题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念和判断题"}},[t._v("#")]),t._v(" 概念和判断题")]),t._v(" "),s("p",[t._v("算法的时间复杂度和"),s("strong",[t._v("问题规模")]),t._v("有关，而与执行程序的质量无关")]),t._v(" "),s("img",{attrs:{src:a(397)}}),t._v(" "),s("p",[s("code",[t._v("X、X、X、√")])]),t._v(" "),s("img",{attrs:{src:a(398)}}),t._v(" "),s("img",{attrs:{src:a(399)}}),t._v(" "),s("h3",{attrs:{id:"数组和串匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组和串匹配"}},[t._v("#")]),t._v(" 数组和串匹配")]),t._v(" "),s("img",{attrs:{src:a(400)}}),t._v(" "),s("p",[t._v("这种表示"),s("code",[t._v("A[1...5, 1...6]")]),t._v("是指一个 5 行 6 列的二维数组，A55 即为第五行第五列的元素，故地址为\n$$\n1000+5\\times(4\\times6+4)=1140\n$$\n其中 1000 为数组起始位置，5 为每个元素长度，4x6 为前四行元素个数，4 为第五行前四个元素，初始地址加元素单位长度乘以元素个数，得到 A55 起始地址")]),t._v(" "),s("img",{attrs:{src:a(401)}}),t._v(" "),s("p",[t._v("第 k 次匹配成功指的是子串匹配完全时外层循环 i 的取值，或者说，是主串中指针所指的头部位置，显然这地第 6 个元素往后四个匹配上了子串，故外层循环为第 6 次，即第 6 次将匹配成功")]),t._v(" "),s("h3",{attrs:{id:"链表增删和队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表增删和队列"}},[t._v("#")]),t._v(" 链表增删和队列")]),t._v(" "),s("p",[t._v("单链表删除节点操作：将后继前移删除当前结点")]),t._v(" "),s("img",{attrs:{src:a(402)}}),t._v(" "),s("p",[t._v("单链表的原地反转（951 默认带头结点）")]),t._v(" "),s("img",{attrs:{src:a(403)}}),t._v(" "),s("p",[t._v("我默认这个链表没带头结点，代码为")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1. p = L->next\n2. p != NULL\n3. p->next = L\n4. L = p\n5. p = q\n")])])]),s("p",[t._v("但是题目默认有头结点，于是代码为，头结点始终为 L，始终用 L->next 指向当前结点的前驱")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1. p = L->next\n2. p != NULL\n3. p->next = L->next\n4. L->next = p\n5. p = q\n")])])]),s("p",[t._v("画图示例一下，一定要注意要先把 p（当前结点）保存到 L 中（作为下一次操作的前驱），再把 p 置为后继 q")]),t._v(" "),s("p",[t._v("循环队列元素个数判定：这里是否要考虑指针指向空还是元素的问题？"),s("code",[t._v("50 - (13-5) = 42")])]),t._v(" "),s("img",{attrs:{src:a(404)}}),t._v(" "),s("p",[t._v("注意区分队头和头指针的区别，队头指的是入队时元素追加的位置，而头指针就是指链表的头部")]),t._v(" "),s("img",{attrs:{src:a(405)}}),t._v(" "),s("h3",{attrs:{id:"完全二叉树、哈夫曼树、有向图的邻接表和邻接矩阵"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完全二叉树、哈夫曼树、有向图的邻接表和邻接矩阵"}},[t._v("#")]),t._v(" 完全二叉树、哈夫曼树、有向图的邻接表和邻接矩阵")]),t._v(" "),s("p",[t._v("完全二叉树结点最多最少个数计算")]),t._v(" "),s("img",{attrs:{src:a(406)}}),t._v(" "),s("p",[t._v("第六层有 9 个叶子结点有两种可能性，分别对应了结点数最多和最少的两种情况")]),t._v(" "),s("ul",[s("li",[t._v("铺满左侧，右侧有 9 个叶子结点")]),t._v(" "),s("li",[t._v("左侧有 9 个叶子结点，右侧全为空")])]),t._v(" "),s("p",[t._v("邻接表查找入度的时间复杂度：就是遍历每一个结点和每一条边，共 N+E 次")]),t._v(" "),s("img",{attrs:{src:a(407)}}),t._v(" "),s("p",[t._v("哈夫曼树及其编码数量的判断：哈夫曼树想要无限延展，除了根节点每层只能有两个结点，码字数量即为叶子结点的数量，在这样的排布下，将会有"),s("code",[t._v("(215-1) / 2 + 1")]),t._v("个叶子结点（减去的 1 是根节点，除以二是求层数，每层一个叶子结点，加上的 1 是最后一层多的一个叶子结点）")]),t._v(" "),s("img",{attrs:{src:a(408)}}),t._v(" "),s("p",[t._v("有向图的最大边数")]),t._v(" "),s("img",{attrs:{src:a(409)}}),t._v(" "),s("p",[t._v("n 个结点，有"),s("code",[t._v("(n-1)+(n-2)+...+1")]),t._v("种连接方式，每种连接可以是双向，故有向边条数最多为\n$$\n2\\times[1+2+...+(n-1)]=2\\times\\frac{n\\times(n-1)}{2}=n(n-1)\n$$\n"),s("img",{attrs:{src:a(410)}})]),t._v(" "),s("p",[t._v("共 n^2 个空位，减去有值的 e 条边，得零元素个数，注意有向图的邻接矩阵对角线一定为 0")]),t._v(" "),s("h3",{attrs:{id:"快排和散列表平均查找长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快排和散列表平均查找长度"}},[t._v("#")]),t._v(" 快排和散列表平均查找长度")]),t._v(" "),s("p",[t._v("快速排序过程考察")]),t._v(" "),s("img",{attrs:{src:a(411)}}),t._v(" "),s("p",[t._v("散列表的平均查找长度计算（成功和不成功）")]),t._v(" "),s("img",{attrs:{src:a(412)}}),t._v(" "),s("ul",[s("li",[t._v("成功的平均查找长度 ASL 为各个元素查找成功所需次数之和除以实际元素个数")]),t._v(" "),s("li",[t._v("查找失败的平均查找长度 ASL 为各个余数确定其查找失败所需比较次数之和除以模运算完全剩余系元素个数")])]),t._v(" "),s("p",[t._v("比如这里模 13，那么查找不成功的平均查找长度就要遍历余数为"),s("code",[t._v("0,1,...,12")]),t._v("的共十三个空格，最后取平均；而元素个数为 12，平均查找成功长度则要除以 12")]),t._v(" "),s("img",{attrs:{src:a(413)}}),t._v(" "),s("p",[t._v("求模运算一定要细心，另外查找失败的比较次数"),s("strong",[t._v("要加上最后判定为空的一次比较")]),t._v("，比如 x 模 13 得 11，则确定其查找失败要先比较第 11、12 位置的元素值，发现不吻合，于是比较第 0 位置的元素，发现为空，故确定 x 不存在共需比较 3 次")])])}),[],!1,null,null,null);s.default=e.exports}}]);